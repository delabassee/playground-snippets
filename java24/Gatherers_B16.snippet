// Custom Equal Parallel Gatherer
static <T, R> Gatherer<T, ?, T> customEqual(Function<? super T, ? extends R> equalMapper) {

   return Gatherer.of(
      () -> new HashMap<R, T>(),
      (map, element, _) -> {
         var key = equalMapper.apply(element);
         map.putIfAbsent(key, element);
         return true;
      },
      (map1, map2) -> {
         map2.forEach(map1::putIfAbsent);
         return map1;
      },
      (map, downstream) -> {
         map.values().stream()
               .takeWhile(_ -> !downstream.isRejecting())
               .forEach(downstream::push);
      }
   );
}

var stream = Stream.of("one", "One", "ONE", "Two", "two", "tWo");
var result = stream.parallel().gather(customEqual(String::toLowerCase)).toList();
System.out.println("result = " + result);
